% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/locate.R
\name{str_locate}
\alias{str_locate}
\alias{str_locate_all}
\title{Locate the position of patterns in a string}
\usage{
str_locate(string, pattern)

str_locate_all(string, pattern)
}
\arguments{
\item{string}{\verb{character vector} of strings.}

\item{pattern}{\code{string} or \verb{character vector}, pattern(s) to match. Can be:
\itemize{
\item A Perl-compatible regular expression (default).
\item Wrap with \code{perl(ignore_case = TRUE)} to use case-insensitive matching.
\item Wrap with \code{fixed()} to use a fixed/literal match.
\item Wrap with \code{regex()} to use a POSIX 1003.2 extended regular expression.
\item Wrap with \code{regex(ignore_case = TRUE)} to use case-insensitive matching with
a POSIX 1003.2 extended regular expression.
}}
}
\value{
For \code{str_locate()}, an \verb{integer matrix}. First column gives start
postion of match, and second column gives end position. For
\code{str_locate_all()} a \code{list} of integer matrices.
}
\description{
Vectorised over \code{string} and \code{pattern}, though using vectorised
patterns is relatively slow compared to \code{stringr}. If the match is of length
0, (e.g. from a special match like \code{$}) end will be one character less
than start.
}
\examples{
fruit <- c("apple", "banana", "pear", "pineapple")
str_locate(fruit, "$")
str_locate(fruit, "a")
str_locate(fruit, "e")
str_locate("apple", c("a", "b", "p", "p"))

str_locate_all(fruit, "a")
str_locate_all(fruit, "e")

# Find location of every character
str_locate_all(fruit, "")
}
\seealso{
\code{\link[=str_extract]{str_extract()}} for a convenient way of extracting matches.
}
