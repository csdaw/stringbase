% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract.R
\name{str_extract_all}
\alias{str_extract_all}
\title{Extract all matches from a string using a pattern}
\usage{
str_extract_all(string, pattern, simplify = FALSE)
}
\arguments{
\item{string}{\verb{character vector} of strings.}

\item{pattern}{\code{character}, a pattern to match. Can be:
\itemize{
\item A Perl-compatible regular expression (default).
\item Wrap with \code{perl(ignore_case = TRUE)} to use case-insensitive matching.
\item Wrap with \code{fixed()} to use a fixed/literal match.
\item Wrap with \code{regex()} to use a POSIX 1003.2 extended regular expression.
\item Wrap with \code{regex(ignore_case = TRUE)} to use case-insensitive matching with
a POSIX 1003.2 extended regular expression.
}}

\item{simplify}{\code{logical}, should output list be simplified to a matrix?
Default is \code{FALSE}.}
}
\value{
Returns a \code{list} the same length as \code{string}, unless \code{simply = TRUE}
wherein a \verb{character matrix} is returned with non-matching elements
replaced with \code{""}.
}
\description{
Vectorised over \code{string}, but not \code{pattern} which must be
a single string (unlike stringr).
}
\examples{
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")

# Extract all matches
str_extract_all(shopping_list, "[a-z]+")
str_extract_all(shopping_list, "\\\\b[a-z]+\\\\b")
str_extract_all(shopping_list, "\\\\d")

# Simplify results into character matrix
str_extract_all(shopping_list, "\\\\b[a-z]+\\\\b", simplify = TRUE)
str_extract_all(shopping_list, "\\\\d", simplify = TRUE)

# Extract all words
str_extract_all("This is, suprisingly, a sentence.", "\\\\w+")

}
